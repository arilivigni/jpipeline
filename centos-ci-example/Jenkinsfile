properties(
        [
                buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '15', daysToKeepStr: '', numToKeepStr: '30')),
                disableConcurrentBuilds(),
        ]
)

node('fedora-atomic') {
    ansiColor('xterm') {
        timestamps {
            try {
                deleteDir()
                stage('ci-pipeline-rpmbuild') {
                    dir('cciskel') {
                        git 'https://github.com/cgwalters/centos-ci-skeleton'
                    }
                    // provision
                    def current_stage="ci-pipeline-rpmbuild"
                    env.ANSIBLE_HOST_KEY_CHECKING = "False"

                    env.DUFFY_OP="--allocate"
                    allocDuffy("${current_stage}")


                    echo "Duffy Allocate ran for stage ${current_stage} with option ${env.DUFFY_OP}\r\n" +
                            "ORIGIN_WORKSPACE=${env.ORIGIN_WORKSPACE}\r\n" +
                            "ORIGIN_BUILD_TAG=${env.ORIGIN_BUILD_TAG}\r\n" +
                            "ORIGIN_CLASS=${env.ORIGIN_CLASS}"
                    def props_file = "${env.ORIGIN_WORKSPACE}/job.props"
                    def new_props_file = "${env.ORIGIN_WORKSPACE}/job.groovy"
                    convertProps(props_file, new_props_file)
                    load("${env.ORIGIN_WORKSPACE}/job.groovy")

                    // Run Setup
                    setupStage()

                    // Teardown
                    env.DUFFY_OP="--teardown"
                    allocDuffy("${current_stage}")
                    echo "Duffy Deallocate ran for stage ${current_stage} with option ${env.DUFFY_OP}\r\n" +
                            "RSYNC_PASSWORD=${env.RSYNC_PASSWORD}\r\n" +
                            "DUFFY_HOST=${env.DUFFY_HOST}"
                    currentBuild.result = 'SUCCESS'
                }
                stage('ci-pipeline-ostree-compose') {
                    // Provision
                    def current_stage="ci-pipeline-ostree-compose"
                    env.DUFFY_OP="--allocate"
                    allocDuffy("${current_stage}")


                    echo "Duffy Allocate ran for stage ${current_stage} with option ${env.DUFFY_OP}\r\n" +
                            "ORIGIN_WORKSPACE=${env.ORIGIN_WORKSPACE}\r\n" +
                            "ORIGIN_BUILD_TAG=${env.ORIGIN_BUILD_TAG}\r\n" +
                            "ORIGIN_CLASS=${env.ORIGIN_CLASS}"
                    def props_file = "${env.ORIGIN_WORKSPACE}/job.props"
                    def new_props_file = "${env.ORIGIN_WORKSPACE}/job.groovy"
                    convertProps(props_file, new_props_file)
                    load("${env.ORIGIN_WORKSPACE}/job.groovy")

                    // Run Setup
                    setupStage()

                    // Teardown
                    env.DUFFY_OP="--teardown"
                    allocDuffy("${current_stage}")

                    echo "Duffy Deallocate ran for stage ${current_stage} with option ${env.DUFFY_OP}\r\n" +
                            "RSYNC_PASSWORD=${env.RSYNC_PASSWORD}\r\n" +
                            "DUFFY_HOST=${env.DUFFY_HOST}"
                    currentBuild.result = 'SUCCESS'
                }
                stage('ci-pipeline-ostree-boot-sanity') {
                    // Provision
                    def current_stage="ci-pipeline-ostree-boot-sanity"
                    env.DUFFY_OP="--allocate"
                    allocDuffy("${current_stage}")


                    echo "Duffy Allocate ran for stage ${current_stage} with option ${env.DUFFY_OP}\r\n" +
                            "ORIGIN_WORKSPACE=${env.ORIGIN_WORKSPACE}\r\n" +
                            "ORIGIN_BUILD_TAG=${env.ORIGIN_BUILD_TAG}\r\n" +
                            "ORIGIN_CLASS=${env.ORIGIN_CLASS}"
                    def props_file = "${env.ORIGIN_WORKSPACE}/job.props"
                    def new_props_file = "${env.ORIGIN_WORKSPACE}/job.groovy"
                    convertProps(props_file, new_props_file)
                    load("${env.ORIGIN_WORKSPACE}/job.groovy")

                    // Run Setup
                    setupStage()

                    // Teardown
                    env.DUFFY_OP="--teardown"
                    allocDuffy("${current_stage}")

                    echo "Duffy Deallocate ran for stage ${current_stage} with option ${env.DUFFY_OP}\r\n" +
                            "RSYNC_PASSWORD=${env.RSYNC_PASSWORD}\r\n" +
                            "DUFFY_HOST=${env.DUFFY_HOST}"
                    currentBuild.result = 'SUCCESS'
                }
                stage('ci-pipeline-atomic-host-tests') {
                    // Provision
                    def current_stage="ci-pipeline-atomic-host-tests"
                    env.DUFFY_OP="--allocate"
                    allocDuffy("${current_stage}")


                    echo "Duffy Allocate ran for stage ${current_stage} with option ${env.DUFFY_OP}\r\n" +
                            "ORIGIN_WORKSPACE=${env.ORIGIN_WORKSPACE}\r\n" +
                            "ORIGIN_BUILD_TAG=${env.ORIGIN_BUILD_TAG}\r\n" +
                            "ORIGIN_CLASS=${env.ORIGIN_CLASS}"
                    def props_file = "${env.ORIGIN_WORKSPACE}/job.props"
                    def new_props_file = "${env.ORIGIN_WORKSPACE}/job.groovy"
                    convertProps(props_file, new_props_file)
                    load("${env.ORIGIN_WORKSPACE}/job.groovy")

                    // Run Setup
                    setupStage()

                    // Teardown
                    env.DUFFY_OP="--teardown"
                    allocDuffy("${current_stage}")

                    echo "Duffy Deallocate ran for stage ${current_stage} with option ${env.DUFFY_OP}\r\n" +
                            "RSYNC_PASSWORD=${env.RSYNC_PASSWORD}\r\n" +
                            "DUFFY_HOST=${env.DUFFY_HOST}"
                    currentBuild.result = 'SUCCESS'
                }
            } catch (e) {
                // if any exception occurs, mark the build as failed
                currentBuild.result = 'FAILURE'
                throw e
            } finally {
                currentBuild.displayName = "Build# - ${env.BUILD_NUMBER}"
                currentBuild.description = "${currentBuild.result}"
                emailext subject: "${env.JOB_NAME} - Build # ${env.BUILD_NUMBER} - STATUS = ${currentBuild.result}", to: "ari@redhat.com", body: "This pipeline was a ${currentBuild.result}"
                step([$class: 'ArtifactArchiver', allowEmptyArchive: true, artifacts: '**/job.*,**/inventory.*', excludes: '**/*.example', fingerprint: true])
            }
        }
    }
}

def allocDuffy(stage) {
    echo "Currently in stage: ${stage}"
    env.ORIGIN_WORKSPACE="${env.WORKSPACE}/${stage}"
    env.ORIGIN_BUILD_TAG="${env.BUILD_TAG}-${stage}"
    env.ORIGIN_CLASS="builder"
    env.DUFFY_JOB_TIMEOUT_SECS="3600"

    sh '''
        #!/bin/bash
        set -xeuo pipefail
        
        mkdir -p ${ORIGIN_WORKSPACE}
        # If we somehow got called without an op, do nothing.
        if test -z "${DUFFY_OP:-}"; then
          exit 0
        fi
        if test -n "${ORIGIN_WORKSPACE:-}"; then
          pushd ${ORIGIN_WORKSPACE}
        fi
        if test -n "${ORIGIN_CLASS:-}"; then
            exec ${WORKSPACE}/cciskel/cciskel-duffy ${DUFFY_OP} --prefix=ci-pipeline --class=${ORIGIN_CLASS} --jobid=${ORIGIN_BUILD_TAG} \
                --timeout=${DUFFY_JOB_TIMEOUT_SECS:-0} --count=${DUFFY_COUNT:-1}
        else
            exec ${WORKSPACE}/cciskel/cciskel-duffy ${DUFFY_OP}
        fi
    '''
}

def convertProps(file1, file2) {
    def command = $/awk -F'=' '{print "env."$1"=\""$2"\""}' ${file1} > ${file2}/$
    sh command
}

def setupStage() {
    sh '''
        #!/bin/bash
        set -xeuo pipefail

        # Keep compatibility with earlier cciskel-duffy
        if test -f ${ORIGIN_WORKSPACE}/inventory.${ORIGIN_BUILD_TAG}; then
            ln -fs ${ORIGIN_WORKSPACE}/inventory.${ORIGIN_BUILD_TAG} ${WORKSPACE}/inventory
        fi

        if test -n "${playbook:-}"; then
            ansible-playbook -u root -i ${WORKSPACE}/inventory "${playbook}"
        else
            ansible -u root -i ${WORKSPACE}/inventory all -m ping
        fi  
    '''
}